Stage	3	requirements	

For Stage 3 the focus is on baseline implementation of a subset of the elements of
the final system. During this stage you may develop as much of the UML model and
implementation of the final system as you wish. However, you are required to deliver
UML class diagrams, UML sequence diagrams and a standalone Java application,
with associated tests, that implements at least the use cases specified in the
Authentication use case diagram supplied at the start of Stage 3.
In the light of the Stage 3 requirements and experience gained with the development
as it progresses, you should continually review and update your planning and
processes that you started at Stage 2. Continual review through experience and
changing circumstances is a theme that runs through all stages of this group work.
Authentication	and	authorisation	

This section provides details to everyone of some of the clarifications Miles provided
in response to group questions during Stage 2.

At some point, your system will obviously need to integrate with the existing
computer system at Yuconz but the Director of Services Delivery will not allow
integration until after the final acceptance testing. This will mean that you will need to
'mock up' authentication and authorisation procedures.
• Authentication enables a user to gain access to the system with a particular
authorisation level. The idea is that a user's subsequent actions must be
supported by the level of authorisation they obtained when they logged in (i.e.,
were authenticated).
• Authorisation is the process of checking their permission to undertake a
requested action, such as reading or modifying a document.
• The Authentication Server and Authorisation actors are external to the system
and must also be separate from the HR Database.
• There are different levels of authorisation; for example, a Director has rights to
view any record; as do HR Employees. Individual users only have rights to
view their own records. A particular individual might have different levels of
authorization available to them when they log in. For instance, an HR
Employee might wish to access the system in the role of an individual user
rather than an HR Employee. When accessing records, the rights should be
checked against those obtained at the point the user logged into the system.
• A user must not be able to change their authorisation level within a single
session. They must first log out and then re-authenticate.
• There is currently no requirement to record failed login attempts.
• There is currently no requirement to time-limit a login session.
• When a member of staff leaves, their login access to the system must be
removed, but documents relating to them should not.
• Everyone in the company has a unique 6 digit ID. IDs are not reused when a
member of staff leaves.

Deliverables	
We expect you to use Papyrus to develop the model. All other written documents
must be submitted as PDF documents for assessment. All source code must be in
Java. All documents must be uploaded via Moodle.
Each group will make a single, egoless submission of the following deliverables. In
other words, only one member of the group needs to make the submission.
1. We expect your plans to have required revision during this stage, so the
planning documents must be uploaded as a single archive file (.zip) called
Documents.zip. This must contain only PDF documents. The name of each
document should clearly reflect the purpose of the document; e.g.,
meeting-minutes.pdf, quality-plan.pdf, etc.
If you have updated the use case scenarios, then include a PDF version of
those in this archive.
2. Evidence supporting the enactment of your plans. For instance, copies of
meeting minutes, project planning charts, completed document reviews,
‘Issues’ lists, etc. Where you wish to refer to information that is not actually a
document (e.g., ‘Issues’ lists in the gitlab repository), a document containing
URLs for those documents is acceptable. However, all URLs must be to
kent.ac.uk addresses. For instance, URLs to Google Docs are not acceptable.
Upload a single archive file (.zip) called Evidence.zip. This should contain only
PDF documents. The name of each document should clearly reflect the
purpose of the document.
3. You must submit your UML in the form of a single project as a single archive
file (.zip) generated by Papyrus, using the file name Yuconz.zip.
If you have updated the use case scenarios then they must be submitted as
part of the previous item – Documents.zip.
Before uploading the file into Moodle, check whether it works properly (for
example, import the file into another open project in Papyrus) to make sure
that the contents are not corrupted. It is your responsibility to make sure that
the file is neither incomplete nor corrupted.
4. Java source code fulfilling the requirements of at least the baseline
implementation: the Authentication use case diagram. This should be
submitted in the form of a project that could be imported into a standard IDE,
such as Eclipse or Netbeans. Note that BlueJ is not considered to be a
suitable environment for developing the implementation.
The source code should include unit tests for your implementation. Where
your implementation requires external files (e.g., a file of user information)
these should be included. Upload a single archive file (.zip) containing the
source code and any additional external files. Name the file to indicate the
IDE you have used, e.g.: source-eclipse.zip, source-netbeans.zip, etc. Java 
class files are not required.